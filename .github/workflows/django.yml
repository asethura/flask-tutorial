name: Django CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7]

    steps:
    - uses: actions/checkout@v2
      with:
          fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
  test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7]

    steps:
    - uses: actions/checkout@v2
      with:
          fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi    

    - name: Run Tests
      run: |
        pytest tests/*.py

  deployToStage:     
    runs-on: ubuntu-latest
    needs: build
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7]

    steps:
    - uses: actions/checkout@v2
      with:
          fetch-depth: 0

    - name: Heroku login credentials
      run: |
        touch ~/.netrc
        echo "machine api.heroku.com" > ~/.netrc
        echo "  login $HEROKU_EMAIL" >> ~/.netrc
        echo "  password $HEROKU_API_KEY" >> ~/.netrc
        echo "machine git.heroku.com" >> ~/.netrc
        echo "  login $HEROKU_EMAIL" >> ~/.netrc
        echo "  password $HEROKU_API_KEY" >> ~/.netrc
        cat ~/.netrc
        
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}

    - name: Add Heroku remote
      run: heroku git:remote --app $HEROKU_APP_NAME
      env:
        HEROKU_APP_NAME: ${{ secrets.HEROKU_STAGING_APP_NAME }}

    - name: Push to Heroku staging
      run: |
        git push heroku master

    - name: Integration Tests
      run: |
        pip install pytest
        pytest api-tests/apitest.py
  
  deployToProd:     
    runs-on: ubuntu-latest
    needs: deployToStage
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7]

    steps:
    - uses: actions/checkout@v2
      with:
          fetch-depth: 0

    - name: Heroku login credentials
      run: |
        touch ~/.netrc
        echo "machine api.heroku.com" > ~/.netrc
        echo "  login $HEROKU_EMAIL" >> ~/.netrc
        echo "  password $HEROKU_API_KEY" >> ~/.netrc
        echo "machine git.heroku.com" >> ~/.netrc
        echo "  login $HEROKU_EMAIL" >> ~/.netrc
        echo "  password $HEROKU_API_KEY" >> ~/.netrc
        cat ~/.netrc
        
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}

    - name: Add Heroku prod remote
      run: heroku git:remote --app $HEROKU_APP_NAME
      env:
        HEROKU_APP_NAME: ${{ secrets.HEROKU_PROD_APP_NAME }}

    - name: Push to Heroku production
      run: |
        git push heroku master
